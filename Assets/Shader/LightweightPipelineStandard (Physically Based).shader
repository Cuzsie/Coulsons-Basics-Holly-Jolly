Shader "LightweightPipeline/Standard (Physically Based)" {
	Properties {
		[HideInInspector] _WorkflowMode ("WorkflowMode", Float) = 1
		_Color ("Color", Vector) = (0.5,0.5,0.5,1)
		_MainTex ("Albedo", 2D) = "white" {}
		_Cutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
		_Glossiness ("Smoothness", Range(0, 1)) = 0.5
		_GlossMapScale ("Smoothness Scale", Range(0, 1)) = 1
		_SmoothnessTextureChannel ("Smoothness texture channel", Float) = 0
		[Gamma] _Metallic ("Metallic", Range(0, 1)) = 0
		_MetallicGlossMap ("Metallic", 2D) = "white" {}
		_SpecColor ("Specular", Vector) = (0.2,0.2,0.2,1)
		_SpecGlossMap ("Specular", 2D) = "white" {}
		[ToggleOff] _SpecularHighlights ("Specular Highlights", Float) = 1
		[ToggleOff] _GlossyReflections ("Glossy Reflections", Float) = 1
		_BumpScale ("Scale", Float) = 1
		_BumpMap ("Normal Map", 2D) = "bump" {}
		_Parallax ("Height Scale", Range(0.005, 0.08)) = 0.02
		_ParallaxMap ("Height Map", 2D) = "black" {}
		_OcclusionStrength ("Strength", Range(0, 1)) = 1
		_OcclusionMap ("Occlusion", 2D) = "white" {}
		_EmissionColor ("Color", Vector) = (0,0,0,1)
		_EmissionMap ("Emission", 2D) = "white" {}
		_DetailMask ("Detail Mask", 2D) = "white" {}
		_DetailAlbedoMap ("Detail Albedo x2", 2D) = "grey" {}
		_DetailNormalMapScale ("Scale", Float) = 1
		_DetailNormalMap ("Normal Map", 2D) = "bump" {}
		[Enum(UV0,0,UV1,1)] _UVSec ("UV Set for secondary textures", Float) = 0
		[HideInInspector] _Surface ("__surface", Float) = 0
		[HideInInspector] _Blend ("__blend", Float) = 0
		[HideInInspector] _AlphaClip ("__clip", Float) = 0
		[HideInInspector] _SrcBlend ("__src", Float) = 1
		[HideInInspector] _DstBlend ("__dst", Float) = 0
		[HideInInspector] _ZWrite ("__zw", Float) = 1
		[HideInInspector] _Cull ("__cull", Float) = 2
	}
	SubShader {
		LOD 300
		Tags { "IGNOREPROJECTOR" = "true" "RenderPipeline" = "LightweightPipeline" "RenderType" = "Opaque" }
		Pass {
			Name "StandardLit"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "LightweightForward" "RenderPipeline" = "LightweightPipeline" "RenderType" = "Opaque" }
			Blend Zero Zero, Zero Zero
			ZWrite Off
			Cull Off
			GpuProgramID 49438
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_4_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						mat4x4 _WorldToShadow;
						vec4 unused_6_1[11];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _WorldToShadow[1];
					    u_xlat1 = _WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _WorldToShadow[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_10;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					struct unity_Builtins2Array_Type {
						vec4 unity_Builtins2Array.unity_SHArArray;
						vec4 unity_Builtins2Array.unity_SHAgArray;
						vec4 unity_Builtins2Array.unity_SHAbArray;
						vec4 unity_Builtins2Array.unity_SHBrArray;
						vec4 unity_Builtins2Array.unity_SHBgArray;
						vec4 unity_Builtins2Array.unity_SHBbArray;
						vec4 unity_Builtins2Array.unity_SHCArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw2 {
						unity_Builtins2Array_Type unity_Builtins2Array;
						vec4 unused_4_1[14];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_5_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati4;
					float u_xlat8;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati4 = u_xlati0 << 3;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[u_xlati4].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 1)].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array.unity_Builtins0Array.unity_WorldToObjectArray[(u_xlati4 + 2)].xyz);
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
					    u_xlat8 = u_xlat1.y * u_xlat1.y;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + (-u_xlat8);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBrArray, u_xlat2);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBgArray, u_xlat2);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHBbArray, u_xlat2);
					    u_xlat2.xyz = unity_Builtins2Array.unity_Builtins2Array.unity_SHCArray.xyz * vec3(u_xlat8) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHArArray, u_xlat1);
					    u_xlat3.y = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAgArray, u_xlat1);
					    u_xlat3.z = dot(unity_Builtins2Array.unity_Builtins2Array.unity_SHAbArray, u_xlat1);
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xzw = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 1)].xyz;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati4].xyz * in_POSITION0.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 2)].xyz * in_POSITION0.zzz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xzw + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati4 + 3)].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_ShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _ShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat23 = (-_ShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat10_0.x * _ShadowData.x + u_xlat23;
					    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb23) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat22 * u_xlat0.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_ShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _ShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat23 = (-_ShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat10_0.x * _ShadowData.x + u_xlat23;
					    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb23) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat22 * u_xlat0.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowMapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat22 * u_xlat10_2.x;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_3 = texture(_ScreenSpaceShadowMapTexture, u_xlat3.xy);
					    u_xlat0.x = u_xlat22 * u_xlat10_3.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowMapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat22 * u_xlat10_2.x;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_3 = texture(_ScreenSpaceShadowMapTexture, u_xlat3.xy);
					    u_xlat0.x = u_xlat22 * u_xlat10_3.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_ShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _ShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat23 = (-_ShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat10_0.x * _ShadowData.x + u_xlat23;
					    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb23) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat22 * u_xlat0.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_ShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _ShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat23 = (-_ShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat10_0.x * _ShadowData.x + u_xlat23;
					    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb23) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat22 * u_xlat0.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowMapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat22 * u_xlat10_2.x;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_3 = texture(_ScreenSpaceShadowMapTexture, u_xlat3.xy);
					    u_xlat0.x = u_xlat22 * u_xlat10_3.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowMapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat22 * u_xlat10_2.x;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_3 = texture(_ScreenSpaceShadowMapTexture, u_xlat3.xy);
					    u_xlat0.x = u_xlat22 * u_xlat10_3.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_ShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _ShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat23 = (-_ShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat10_0.x * _ShadowData.x + u_xlat23;
					    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb23) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat22 * u_xlat0.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_ShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _ShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat23 = (-_ShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat10_0.x * _ShadowData.x + u_xlat23;
					    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb23) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat22 * u_xlat0.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowMapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat22 * u_xlat10_2.x;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_3 = texture(_ScreenSpaceShadowMapTexture, u_xlat3.xy);
					    u_xlat0.x = u_xlat22 * u_xlat10_3.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowMapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat22 * u_xlat10_2.x;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_3 = texture(_ScreenSpaceShadowMapTexture, u_xlat3.xy);
					    u_xlat0.x = u_xlat22 * u_xlat10_3.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_ShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _ShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat23 = (-_ShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat10_0.x * _ShadowData.x + u_xlat23;
					    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb23) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat22 * u_xlat0.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_ShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _ShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_0.x = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat23 = (-_ShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat10_0.x * _ShadowData.x + u_xlat23;
					    u_xlatb23 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb23) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat22 * u_xlat0.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowMapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat22 * u_xlat10_2.x;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_3 = texture(_ScreenSpaceShadowMapTexture, u_xlat3.xy);
					    u_xlat0.x = u_xlat22 * u_xlat10_3.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Glossiness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
					    SV_Target0.w = u_xlat10_4.w * _Color.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowMapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat22 * u_xlat10_2.x;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[13];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_2[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = (-_Glossiness) + 1.0;
					    u_xlat8.x = (-u_xlat1.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat1.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat15 = max(u_xlat15, 1.17549435e-38);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat15) + _MainLightPosition.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD3.xyz;
					    u_xlat15 = dot((-u_xlat2.xyz), u_xlat4.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat5.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.z = (-u_xlat15) + 1.0;
					    u_xlat1.xz = u_xlat1.xz * u_xlat1.xz;
					    u_xlat15 = u_xlat1.z * u_xlat1.z;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_2.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat1.xx * u_xlat1.xx + vec2(-1.0, 1.0);
					    u_xlat22 = float(1.0) / u_xlat8.z;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat22);
					    u_xlat22 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat23 = (-u_xlat22) + _Glossiness;
					    u_xlat23 = u_xlat23 + 1.0;
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat23) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat15) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * u_xlat0.yzw;
					    SV_Target0.w = u_xlat0.x;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = max(u_xlat0.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat8.x = u_xlat1.x * 4.0 + 2.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_3 = texture(_ScreenSpaceShadowMapTexture, u_xlat3.xy);
					    u_xlat0.x = u_xlat22 * u_xlat10_3.x;
					    u_xlat3.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat7.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Glossiness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat24) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + _Glossiness;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat35 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat35;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_5.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Glossiness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat24) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + _Glossiness;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat35 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat35;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_5.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					int u_xlati24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Glossiness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat24) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlati24 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati24 + 1) / 4][(u_xlati24 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati24 / 4][u_xlati24 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati24 + 2) / 4][(u_xlati24 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati24 + 3) / 4][(u_xlati24 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_24 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat34 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat24 = u_xlat10_24 * _LocalShadowStrength[u_xlati7] + u_xlat34;
					        u_xlatb34 = 0.0>=u_xlat9.z;
					        u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + 1.0;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + _Glossiness;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat35 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat35;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_5.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat34 = u_xlat10_34 * _LocalShadowStrength[u_xlati7] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					int u_xlati24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Glossiness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat24) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlati24 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati24 + 1) / 4][(u_xlati24 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati24 / 4][u_xlati24 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati24 + 2) / 4][(u_xlati24 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati24 + 3) / 4][(u_xlati24 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_24 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat34 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat24 = u_xlat10_24 * _LocalShadowStrength[u_xlati7] + u_xlat34;
					        u_xlatb34 = 0.0>=u_xlat9.z;
					        u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + 1.0;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + _Glossiness;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat35 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat35;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_5.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat34 = u_xlat10_34 * _LocalShadowStrength[u_xlati7] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Glossiness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_ShadowData.x) + 1.0;
					    u_xlat24 = u_xlat10_24 * _ShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat24;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + _Glossiness;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat4 * u_xlat4;
					    u_xlat24 = u_xlat4 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_34 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat5.x = (-_ShadowData.x) + 1.0;
					    u_xlat34 = u_xlat10_34 * _ShadowData.x + u_xlat5.x;
					    u_xlatb5 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat34 = (u_xlatb5) ? 1.0 : u_xlat34;
					    u_xlat5.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat5.x = u_xlat5.x + u_xlat5.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat5.xxx) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = vec2(u_xlat4) * vec2(u_xlat4) + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat35) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4 = inversesqrt(u_xlat33);
					        u_xlat8.xyz = vec3(u_xlat4) * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat4) + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4 = u_xlat4 * u_xlat4;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4 = max(u_xlat4, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14 / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Glossiness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_ShadowData.x) + 1.0;
					    u_xlat24 = u_xlat10_24 * _ShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat24;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + _Glossiness;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat4 * u_xlat4;
					    u_xlat24 = u_xlat4 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_34 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat5.x = (-_ShadowData.x) + 1.0;
					    u_xlat34 = u_xlat10_34 * _ShadowData.x + u_xlat5.x;
					    u_xlatb5 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat34 = (u_xlatb5) ? 1.0 : u_xlat34;
					    u_xlat5.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat5.x = u_xlat5.x + u_xlat5.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat5.xxx) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = vec2(u_xlat4) * vec2(u_xlat4) + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat35) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4 = inversesqrt(u_xlat33);
					        u_xlat8.xyz = vec3(u_xlat4) * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat4) + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4 = u_xlat4 * u_xlat4;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4 = max(u_xlat4, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14 / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Glossiness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24.x = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24.x = float(1.0) / u_xlat24.x;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24.x = u_xlat24.x * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat24.x = u_xlat24.x * u_xlat24.x;
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + _Glossiness;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat5.xy);
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat15.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Glossiness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24.x = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24.x = float(1.0) / u_xlat24.x;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24.x = u_xlat24.x * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat24.x = u_xlat24.x * u_xlat24.x;
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + _Glossiness;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat5.xy);
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat15.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_4_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_4_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					int u_xlati24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Glossiness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_ShadowData.x) + 1.0;
					    u_xlat24 = u_xlat10_24 * _ShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat24;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlati24 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati24 + 1) / 4][(u_xlati24 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati24 / 4][u_xlati24 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati24 + 2) / 4][(u_xlati24 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati24 + 3) / 4][(u_xlati24 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_24 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec1, 0.0);
					        u_xlat34 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat24 = u_xlat10_24 * _LocalShadowStrength[u_xlati7] + u_xlat34;
					        u_xlatb34 = 0.0>=u_xlat9.z;
					        u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_4_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_4_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + 1.0;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + _Glossiness;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat4 * u_xlat4;
					    u_xlat24 = u_xlat4 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_34 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat5.x = (-_ShadowData.x) + 1.0;
					    u_xlat34 = u_xlat10_34 * _ShadowData.x + u_xlat5.x;
					    u_xlatb5 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat34 = (u_xlatb5) ? 1.0 : u_xlat34;
					    u_xlat5.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat5.x = u_xlat5.x + u_xlat5.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat5.xxx) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = vec2(u_xlat4) * vec2(u_xlat4) + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat35) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4 = inversesqrt(u_xlat33);
					        u_xlat8.xyz = vec3(u_xlat4) * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec1, 0.0);
					        u_xlat35 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat34 = u_xlat10_34 * _LocalShadowStrength[u_xlati7] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat4) + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4 = u_xlat4 * u_xlat4;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4 = max(u_xlat4, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14 / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_4_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_4_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					int u_xlati24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Glossiness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_ShadowData.x) + 1.0;
					    u_xlat24 = u_xlat10_24 * _ShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat24;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlati24 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati24 + 1) / 4][(u_xlati24 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati24 / 4][u_xlati24 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati24 + 2) / 4][(u_xlati24 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati24 + 3) / 4][(u_xlati24 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_24 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec1, 0.0);
					        u_xlat34 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat24 = u_xlat10_24 * _LocalShadowStrength[u_xlati7] + u_xlat34;
					        u_xlatb34 = 0.0>=u_xlat9.z;
					        u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_4_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_4_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + 1.0;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + _Glossiness;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat4 * u_xlat4;
					    u_xlat24 = u_xlat4 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_34 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat5.x = (-_ShadowData.x) + 1.0;
					    u_xlat34 = u_xlat10_34 * _ShadowData.x + u_xlat5.x;
					    u_xlatb5 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat34 = (u_xlatb5) ? 1.0 : u_xlat34;
					    u_xlat5.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat5.x = u_xlat5.x + u_xlat5.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat5.xxx) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = vec2(u_xlat4) * vec2(u_xlat4) + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat35) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4 = inversesqrt(u_xlat33);
					        u_xlat8.xyz = vec3(u_xlat4) * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec1, 0.0);
					        u_xlat35 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat34 = u_xlat10_34 * _LocalShadowStrength[u_xlati7] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat4) + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4 = u_xlat4 * u_xlat4;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4 = max(u_xlat4, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14 / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec2 u_xlat24;
					float u_xlat10_24;
					int u_xlati24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Glossiness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24.x = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24.x = float(1.0) / u_xlat24.x;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24.x = u_xlat24.x * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat24.x = u_xlat24.x * u_xlat24.x;
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlati24 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati24 + 1) / 4][(u_xlati24 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati24 / 4][u_xlati24 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati24 + 2) / 4][(u_xlati24 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati24 + 3) / 4][(u_xlati24 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_24 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat34 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat24.x = u_xlat10_24 * _LocalShadowStrength[u_xlati7] + u_xlat34;
					        u_xlatb34 = 0.0>=u_xlat9.z;
					        u_xlat24.x = (u_xlatb34) ? 1.0 : u_xlat24.x;
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + 1.0;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + _Glossiness;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat5.xy);
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat15.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat34 = u_xlat10_34 * _LocalShadowStrength[u_xlati7] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec2 u_xlat24;
					float u_xlat10_24;
					int u_xlati24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Glossiness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24.x = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24.x = float(1.0) / u_xlat24.x;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24.x = u_xlat24.x * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat24.x = u_xlat24.x * u_xlat24.x;
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlati24 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati24 + 1) / 4][(u_xlati24 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati24 / 4][u_xlati24 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati24 + 2) / 4][(u_xlati24 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati24 + 3) / 4][(u_xlati24 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_24 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat34 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat24.x = u_xlat10_24 * _LocalShadowStrength[u_xlati7] + u_xlat34;
					        u_xlatb34 = 0.0>=u_xlat9.z;
					        u_xlat24.x = (u_xlatb34) ? 1.0 : u_xlat24.x;
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + 1.0;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + _Glossiness;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat5.xy);
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat15.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat34 = u_xlat10_34 * _LocalShadowStrength[u_xlati7] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Glossiness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat24) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + _Glossiness;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat35 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat35;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_5.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Glossiness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat24) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + _Glossiness;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat35 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat35;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_5.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					int u_xlati24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Glossiness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat24) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlati24 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati24 + 1) / 4][(u_xlati24 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati24 / 4][u_xlati24 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati24 + 2) / 4][(u_xlati24 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati24 + 3) / 4][(u_xlati24 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_24 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat34 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat24 = u_xlat10_24 * _LocalShadowStrength[u_xlati7] + u_xlat34;
					        u_xlatb34 = 0.0>=u_xlat9.z;
					        u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + 1.0;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + _Glossiness;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat35 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat35;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_5.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat34 = u_xlat10_34 * _LocalShadowStrength[u_xlati7] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					int u_xlati24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Glossiness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat24) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlati24 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati24 + 1) / 4][(u_xlati24 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati24 / 4][u_xlati24 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati24 + 2) / 4][(u_xlati24 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati24 + 3) / 4][(u_xlati24 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_24 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat34 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat24 = u_xlat10_24 * _LocalShadowStrength[u_xlati7] + u_xlat34;
					        u_xlatb34 = 0.0>=u_xlat9.z;
					        u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + 1.0;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + _Glossiness;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat35 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat35;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_5.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat34 = u_xlat10_34 * _LocalShadowStrength[u_xlati7] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Glossiness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_ShadowData.x) + 1.0;
					    u_xlat24 = u_xlat10_24 * _ShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat24;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + _Glossiness;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat4 * u_xlat4;
					    u_xlat24 = u_xlat4 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_34 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat5.x = (-_ShadowData.x) + 1.0;
					    u_xlat34 = u_xlat10_34 * _ShadowData.x + u_xlat5.x;
					    u_xlatb5 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat34 = (u_xlatb5) ? 1.0 : u_xlat34;
					    u_xlat5.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat5.x = u_xlat5.x + u_xlat5.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat5.xxx) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = vec2(u_xlat4) * vec2(u_xlat4) + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat35) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4 = inversesqrt(u_xlat33);
					        u_xlat8.xyz = vec3(u_xlat4) * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat4) + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4 = u_xlat4 * u_xlat4;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4 = max(u_xlat4, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14 / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Glossiness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_ShadowData.x) + 1.0;
					    u_xlat24 = u_xlat10_24 * _ShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat24;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + _Glossiness;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat4 * u_xlat4;
					    u_xlat24 = u_xlat4 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_34 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat5.x = (-_ShadowData.x) + 1.0;
					    u_xlat34 = u_xlat10_34 * _ShadowData.x + u_xlat5.x;
					    u_xlatb5 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat34 = (u_xlatb5) ? 1.0 : u_xlat34;
					    u_xlat5.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat5.x = u_xlat5.x + u_xlat5.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat5.xxx) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = vec2(u_xlat4) * vec2(u_xlat4) + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat35) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4 = inversesqrt(u_xlat33);
					        u_xlat8.xyz = vec3(u_xlat4) * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat4) + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4 = u_xlat4 * u_xlat4;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4 = max(u_xlat4, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14 / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Glossiness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24.x = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24.x = float(1.0) / u_xlat24.x;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24.x = u_xlat24.x * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat24.x = u_xlat24.x * u_xlat24.x;
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + _Glossiness;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat5.xy);
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat15.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Glossiness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24.x = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24.x = float(1.0) / u_xlat24.x;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24.x = u_xlat24.x * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat24.x = u_xlat24.x * u_xlat24.x;
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + _Glossiness;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat5.xy);
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat15.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_4_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_4_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					int u_xlati24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Glossiness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_ShadowData.x) + 1.0;
					    u_xlat24 = u_xlat10_24 * _ShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat24;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlati24 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati24 + 1) / 4][(u_xlati24 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati24 / 4][u_xlati24 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati24 + 2) / 4][(u_xlati24 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati24 + 3) / 4][(u_xlati24 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_24 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec1, 0.0);
					        u_xlat34 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat24 = u_xlat10_24 * _LocalShadowStrength[u_xlati7] + u_xlat34;
					        u_xlatb34 = 0.0>=u_xlat9.z;
					        u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_4_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_4_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + 1.0;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + _Glossiness;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat4 * u_xlat4;
					    u_xlat24 = u_xlat4 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_34 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat5.x = (-_ShadowData.x) + 1.0;
					    u_xlat34 = u_xlat10_34 * _ShadowData.x + u_xlat5.x;
					    u_xlatb5 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat34 = (u_xlatb5) ? 1.0 : u_xlat34;
					    u_xlat5.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat5.x = u_xlat5.x + u_xlat5.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat5.xxx) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = vec2(u_xlat4) * vec2(u_xlat4) + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat35) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4 = inversesqrt(u_xlat33);
					        u_xlat8.xyz = vec3(u_xlat4) * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec1, 0.0);
					        u_xlat35 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat34 = u_xlat10_34 * _LocalShadowStrength[u_xlati7] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat4) + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4 = u_xlat4 * u_xlat4;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4 = max(u_xlat4, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14 / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_4_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_4_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					int u_xlati24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Glossiness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_ShadowData.x) + 1.0;
					    u_xlat24 = u_xlat10_24 * _ShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat24;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24 = float(1.0) / u_xlat24;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24 = u_xlat24 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat24 = u_xlat24 * u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlati24 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati24 + 1) / 4][(u_xlati24 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati24 / 4][u_xlati24 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati24 + 2) / 4][(u_xlati24 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati24 + 3) / 4][(u_xlati24 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_24 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec1, 0.0);
					        u_xlat34 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat24 = u_xlat10_24 * _LocalShadowStrength[u_xlati7] + u_xlat34;
					        u_xlatb34 = 0.0>=u_xlat9.z;
					        u_xlat24 = (u_xlatb34) ? 1.0 : u_xlat24;
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat24 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _DirectionalShadowBuffer {
						vec4 unused_3_0[13];
						vec4 _ShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_4_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_4_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2DShadow hlslcc_zcmp_DirectionalShadowmapTexture;
					uniform  sampler2D _DirectionalShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat14;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + 1.0;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + _Glossiness;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat4 * u_xlat4;
					    u_xlat24 = u_xlat4 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_34 = textureLod(hlslcc_zcmp_DirectionalShadowmapTexture, txVec0, 0.0);
					    u_xlat5.x = (-_ShadowData.x) + 1.0;
					    u_xlat34 = u_xlat10_34 * _ShadowData.x + u_xlat5.x;
					    u_xlatb5 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat34 = (u_xlatb5) ? 1.0 : u_xlat34;
					    u_xlat5.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat5.x = u_xlat5.x + u_xlat5.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat5.xxx) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = vec2(u_xlat4) * vec2(u_xlat4) + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat35) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4 = inversesqrt(u_xlat33);
					        u_xlat8.xyz = vec3(u_xlat4) * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec1, 0.0);
					        u_xlat35 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat34 = u_xlat10_34 * _LocalShadowStrength[u_xlati7] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat4) + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4 = u_xlat4 * u_xlat4;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4 = max(u_xlat4, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14 / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec2 u_xlat24;
					float u_xlat10_24;
					int u_xlati24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Glossiness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24.x = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24.x = float(1.0) / u_xlat24.x;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24.x = u_xlat24.x * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat24.x = u_xlat24.x * u_xlat24.x;
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlati24 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati24 + 1) / 4][(u_xlati24 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati24 / 4][u_xlati24 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati24 + 2) / 4][(u_xlati24 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati24 + 3) / 4][(u_xlati24 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_24 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat34 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat24.x = u_xlat10_24 * _LocalShadowStrength[u_xlati7] + u_xlat34;
					        u_xlatb34 = 0.0>=u_xlat9.z;
					        u_xlat24.x = (u_xlatb34) ? 1.0 : u_xlat24.x;
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + 1.0;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + _Glossiness;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat5.xy);
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat15.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat34 = u_xlat10_34 * _LocalShadowStrength[u_xlati7] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_5;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					vec2 u_xlat24;
					float u_xlat10_24;
					int u_xlati24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					uint u_xlatu32;
					bool u_xlatb32;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _Color.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Glossiness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Glossiness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlat32 = u_xlat32 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu32 = uint(u_xlat32);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu32].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat32 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat32);
					        u_xlat8.xyz = vec3(u_xlat33) * u_xlat17.xyz;
					        u_xlat24.x = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat24.x = float(1.0) / u_xlat24.x;
					        u_xlat32 = u_xlat32 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat24.x = u_xlat24.x * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat24.x = u_xlat24.x * u_xlat24.x;
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlati24 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati24 + 1) / 4][(u_xlati24 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati24 / 4][u_xlati24 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati24 + 2) / 4][(u_xlati24 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati24 + 3) / 4][(u_xlati24 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_24 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat34 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat24.x = u_xlat10_24 * _LocalShadowStrength[u_xlati7] + u_xlat34;
					        u_xlatb34 = 0.0>=u_xlat9.z;
					        u_xlat24.x = (u_xlatb34) ? 1.0 : u_xlat24.x;
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat24.x = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat24.x;
					        u_xlat9.xyz = vec3(u_xlat32) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat1.xyz + u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_ENABLED" "_LOCAL_SHADOWS_ENABLED" "_SHADOWS_CASCADE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					#ifdef GL_ARB_shader_storage_buffer_object
					#extension GL_ARB_shader_storage_buffer_object : enable
					#endif
					#ifdef GL_ARB_shader_image_load_store
					#extension GL_ARB_shader_image_load_store : enable
					#endif
					
					layout(std140) uniform _PerCamera {
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_2[4];
						vec4 _AdditionalLightCount;
						vec4 _AdditionalLightPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightDistanceAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightSpotAttenuation[16];
						vec4 unused_0_13[16];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightIndicesOffsetAndCount;
						vec4 unused_1_2[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[11];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _Color;
						vec4 unused_2_2[2];
						float _Cutoff;
						float _Glossiness;
						float _Metallic;
						vec4 unused_2_6;
					};
					layout(std140) uniform _LocalShadowBuffer {
						mat4x4 _LocalWorldToShadowAtlas[16];
						vec4 unused_3_1[60];
						float _LocalShadowStrength[16];
						vec4 unused_3_3[20];
					};
					 struct _LightIndexBuffer_type {
						uint[1] value;
					};
					
					layout(std430, binding = 0) readonly buffer _LightIndexBuffer {
						_LightIndexBuffer_type _LightIndexBuffer_buf[];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ScreenSpaceShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_LocalShadowmapTexture;
					uniform  sampler2D _LocalShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat24;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					float u_xlat32;
					int u_xlati32;
					float u_xlat33;
					float u_xlat16_33;
					uint u_xlatu33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_0.wxyz * _Color.wxyz;
					    u_xlat30 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb30 = u_xlat30<0.0;
					    if(((int(u_xlatb30) * int(0xffffffffu)))!=0){discard;}
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat32 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat33 = (-u_xlat32) + 1.0;
					    u_xlat11.xyz = u_xlat1.yzw * vec3(u_xlat32);
					    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat32 = u_xlat33 + _Glossiness;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat4.x = u_xlat33 * u_xlat33;
					    u_xlat24 = u_xlat4.x * 4.0 + 2.0;
					    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowMapTexture, u_xlat5.xy);
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat4.w = (-u_xlat34) + 1.0;
					    u_xlat14.xz = u_xlat4.xw * u_xlat4.xw;
					    u_xlat34 = u_xlat14.z * u_xlat14.z;
					    u_xlat6.x = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat33 = u_xlat33 * u_xlat6.x;
					    u_xlat33 = u_xlat33 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat33);
					    u_xlat16_33 = u_xlat10_6.w + -1.0;
					    u_xlat33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = log2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.y;
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat33 = u_xlat33 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat33);
					    u_xlat6.xy = u_xlat4.xx * u_xlat4.xx + vec2(-1.0, 1.0);
					    u_xlat33 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat33);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat32);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat11.xyz + u_xlat15.xyz;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = u_xlat32 * u_xlat10_5.x;
					    u_xlat16.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat32 = max(u_xlat32, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat24 * u_xlat30;
					    u_xlat30 = u_xlat14.x / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightCount.x, unity_LightIndicesOffsetAndCount.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = float(u_xlati_loop_1);
					        u_xlat33 = u_xlat33 + unity_LightIndicesOffsetAndCount.x;
					        u_xlatu33 = uint(u_xlat33);
					        u_xlati7 = int(_LightIndexBuffer_buf[u_xlatu33].value[(0 >> 2) + 0]);
					        u_xlat17.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightPosition[u_xlati7].www + _AdditionalLightPosition[u_xlati7].xyz;
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat4.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat34 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].x + 1.0;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat33 = u_xlat33 * _AdditionalLightDistanceAttenuation[u_xlati7].y + _AdditionalLightDistanceAttenuation[u_xlati7].z;
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightSpotDir[u_xlati7].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightSpotAttenuation[u_xlati7].x + _AdditionalLightSpotAttenuation[u_xlati7].y;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati7 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _LocalWorldToShadowAtlas[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _LocalWorldToShadowAtlas[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _LocalWorldToShadowAtlas[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _LocalWorldToShadowAtlas[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_LocalShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_LocalShadowStrength[u_xlati7]);
					        u_xlat34 = u_xlat10_34 * _LocalShadowStrength[u_xlati7] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightColor[u_xlati7].xyz;
					        u_xlat7.xyz = u_xlat17.xyz * u_xlat4.xxx + u_xlat3.xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 1.17549435e-38);
					        u_xlat33 = inversesqrt(u_xlat33);
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat7.xyz;
					        u_xlat33 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat6.x + 1.00001001;
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat4.x = max(u_xlat4.x, 0.100000001);
					        u_xlat33 = u_xlat33 * u_xlat4.x;
					        u_xlat33 = u_xlat24 * u_xlat33;
					        u_xlat33 = u_xlat14.x / u_xlat33;
					        u_xlat7.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat11.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat11.xyz + u_xlat16.xyz;
					    SV_Target0.w = u_xlat1.x;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "ShadowCaster"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "SHADOWCASTER" "RenderPipeline" = "LightweightPipeline" "RenderType" = "Opaque" }
			Cull Off
			GpuProgramID 102087
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 _ShadowBias;
						vec3 _LightDirection;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[21];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat6 = u_xlat6 * _ShadowBias.y;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat4 = u_xlat0.z + _ShadowBias.x;
					    gl_Position.z = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 _ShadowBias;
						vec3 _LightDirection;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[21];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat6 = u_xlat6 * _ShadowBias.y;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat4 = u_xlat0.z + _ShadowBias.x;
					    gl_Position.z = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 _ShadowBias;
						vec3 _LightDirection;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 << 3;
					    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 1)].xyz;
					    u_xlat2.xyz = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 2)].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(_LightDirection.xyz, u_xlat2.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat1.x * _ShadowBias.y;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 1)].xyz;
					    u_xlat3.xyz = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 2)].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 3)].xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat4 = u_xlat0.z + _ShadowBias.x;
					    gl_Position.z = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 _ShadowBias;
						vec3 _LightDirection;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_3_1[16];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 << 3;
					    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 1)].xyz;
					    u_xlat2.xyz = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 2)].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.xxx;
					    u_xlat1.x = dot(_LightDirection.xyz, u_xlat2.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat1.x * _ShadowBias.y;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 1)].xyz;
					    u_xlat3.xyz = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 2)].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 3)].xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat4 = u_xlat0.z + _ShadowBias.x;
					    gl_Position.z = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_TARGET0;
					void main()
					{
					    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_0_0;
						vec4 _Color;
						vec4 unused_0_2[2];
						float _Cutoff;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_TARGET0;
					float u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_TARGET0;
					void main()
					{
					    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_0_0;
						vec4 _Color;
						vec4 unused_0_2[2];
						float _Cutoff;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_TARGET0;
					float u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "DepthOnly"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "DepthOnly" "RenderPipeline" = "LightweightPipeline" "RenderType" = "Opaque" }
			ColorMask 0 -1
			Cull Off
			GpuProgramID 181776
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[21];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[21];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerFrame {
						vec4 unused_0_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_2_1[16];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 << 3;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 1)];
					    u_xlat1 = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 2)] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 3)];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_SV_InstanceID0 = 0u;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerFrame {
						vec4 unused_0_0[19];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityDrawCallInfo {
						int unity_BaseInstanceID;
					};
					struct unity_Builtins0Array_Type {
						mat4x4 unity_Builtins0Array.unity_ObjectToWorldArray;
						mat4x4 unity_Builtins0Array.unity_WorldToObjectArray;
					};
					layout(std140) uniform UnityInstancing_PerDraw0 {
						unity_Builtins0Array_Type unity_Builtins0Array;
						vec4 unused_2_1[16];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _MainTex_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					flat out uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 << 3;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 1)];
					    u_xlat1 = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[u_xlati0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 2)] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_Builtins0Array.unity_Builtins0Array.unity_ObjectToWorldArray[(u_xlati0 + 3)];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_SV_InstanceID0 = 0u;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_TARGET0;
					void main()
					{
					    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ALPHATEST_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_0_0;
						vec4 _Color;
						vec4 unused_0_2[2];
						float _Cutoff;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_TARGET0;
					float u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_TARGET0;
					void main()
					{
					    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "INSTANCING_ON" "_ALPHATEST_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_0_0;
						vec4 _Color;
						vec4 unused_0_2[2];
						float _Cutoff;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_TARGET0;
					float u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat10_0.w * _Color.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "Meta"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "RenderPipeline" = "LightweightPipeline" "RenderType" = "Opaque" }
			Cull Off
			GpuProgramID 216455
		}
	}
	Fallback "Hidden/InternalErrorShader"
	CustomEditor "LightweightStandardGUI"
}